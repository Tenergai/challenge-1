package org.engcia;

import org.engcia.model.Evidence;
import org.engcia.model.Hypothesis;
import org.engcia.model.Conclusion;
import org.engcia.model.Fact;

import function org.engcia.view.UI.answer;

query "Conclusions"
	$conclusion : Conclusion()
end

rule "R1: R>1"
    when
        eval(answer("Ratio greater than 1", "yes"))
    then
        Hypothesis h = new Hypothesis("R>1", "true");
        insert(h);
end

rule "R2: R>1 and Predicted Energy Scarcity"
    when
        Hypothesis(description == "R>1", value == "true")
        eval(answer("Predicted Energy Scarcity", "yes"))
    then
        Hypothesis h = new Hypothesis("Predicted Energy Scarcity", "true");
        insert(h);
end

rule "R3: R>1 and Not Predicted Energy Scarcity"
    when
        Hypothesis(description == "R>1", value == "true")
        eval(answer("Predicted Energy Scarcity", "no"))
    then
        Hypothesis h = new Hypothesis("Predicted Energy Scarcity", "false");
        insert(h);
end

rule "R4: R>1 and Predicted Energy Scarcity and Has EV"
    when
        Hypothesis(description == "R>1", value == "true")
        Hypothesis(description == "Predicted Energy Scarcity", value == "true")
        eval(answer("Has EV", "yes"))
    then
        Hypothesis h = new Hypothesis("Has EV", "true");
        insert(h);
end

rule "R5: R>1 and Predicted Energy Scarcity and Has Not EV -> Sell to the community market"
    when
        Hypothesis(description == "R>1", value == "true")
        Hypothesis(description == "Predicted Energy Scarcity", value == "true")
        eval(answer("Has EV", "no"))
    then
        Conclusion c = new Conclusion(Conclusion.SELL_COMMUNITY_MARKET);
        insert(c);
end

rule "R6: R>1 and Has EV and Sufficiently Charged Battery -> Sell to the community market"
    when
        Hypothesis(description == "R>1", value == "true")
        Hypothesis(description == "Has EV", value == "true")
        eval(answer("Sufficiently Charged Battery", "yes"))
    then
        Conclusion c = new Conclusion(Conclusion.SELL_COMMUNITY_MARKET);
        insert(c);
end

rule "R7: R>1 and Has EV and Not Sufficiently Charged Battery"
    when
        Hypothesis(description == "R>1", value == "true")
        Hypothesis(description == "Has EV", value == "true")        
        eval(answer("Sufficiently Charged Battery", "no"))
    then
        Hypothesis h = new Hypothesis("Sufficiently Charged Battery", "false");
        insert(h);
end

rule "R7: R>1 and Has EV and Not Sufficiently Charged Battery and Not Expensive Hour -> Charge Battery"
    when
        Hypothesis(description == "R>1", value == "true")
        Hypothesis(description == "Has EV", value == "true")
        Hypothesis(description == "Sufficiently Charged Battery", value == "false")
        eval(answer("Expensive Hour", "no"))
    then
        Conclusion c = new Conclusion(Conclusion.CHARGE_BATTERY);
        insert(c);
end

rule "R7: R>1 and Has EV and Not Sufficiently Charged Battery and Expensive Hour -> Sell"
    when
        Hypothesis(description == "R>1", value == "true")
        Hypothesis(description == "Has EV", value == "true")
        Hypothesis(description == "Sufficiently Charged Battery", value == "false")
        eval(answer("Expensive Hour", "yes"))
    then
        Conclusion c = new Conclusion(Conclusion.SELL_COMMUNITY_MARKET);
        insert(c);
end

rule "R8: R>1 and Not Predicted Energy Scarcity and Wants to shift load -> Shift Load"
    when
        Hypothesis(description == "R>1", value == "true")
        Hypothesis(description == "Predicted Energy Scarcity", value == "false")
        eval(answer("Wants to shift load", "yes"))
    then
        Conclusion c = new Conclusion(Conclusion.SHIFT_LOAD);
        insert(c);
end

rule "R9: R>1 and Not Predicted Energy Scarcity and Not Wants to shift load"
    when
        Hypothesis(description == "R>1", value == "true")
        Hypothesis(description == "Predicted Energy Scarcity", value == "false")
        eval(answer("Wants to shift load", "no"))
    then
        Hypothesis h = new Hypothesis("Wants to shift load", "false");
        insert(h);
end

rule "R10: R>1 and Not Wants to shift load and Has EV"
    when
        Hypothesis(description == "R>1", value == "true")
        Hypothesis(description == "Wants to shift load", value == "false")
        eval(answer("Has EV", "yes"))
    then
        Hypothesis h = new Hypothesis("Has EV", "true");
        insert(h);
end

rule "R11: R>1 and Not Wants to shift load and Not Has EV -> Sell"
    when
        Hypothesis(description == "R>1", value == "true")
        Hypothesis(description == "Wants to shift load", value == "false")
        eval(answer("Has EV", "no"))
    then
        Conclusion c = new Conclusion(Conclusion.SELL_COMMUNITY_MARKET);
        insert(c);
end

rule "R12: R>1 and Has EV and Sufficiently Charged Battery -> Sell"
    when
        Hypothesis(description == "R>1", value == "true")
        Hypothesis(description == "Has EV", value == "true")
        eval(answer("Sufficiently charged battery", "yes"))
    then
        Conclusion c = new Conclusion(Conclusion.SELL_COMMUNITY_MARKET);
        insert(c);
end

rule "R13: R>1 and Has EV and Not Sufficiently Charged Battery"
    when
        Hypothesis(description == "R>1", value == "true")
        Hypothesis(description == "Has EV", value == "true")
        eval(answer("Sufficiently charged battery", "no"))
    then
        Hypothesis h = new Hypothesis("Sufficiently charged battery", "false");
        insert(h);
end

rule "R14: R>1 and Not Sufficiently Charged Battery and Expensive Hour -> Sell"
    when
        Hypothesis(description == "R>1", value == "true")
        Hypothesis(description == "Sufficiently charged battery", value == "false")
        eval(answer("Expensive Hour", "yes"))
    then
        Conclusion c = new Conclusion(Conclusion.SELL_COMMUNITY_MARKET);
        insert(c);
end

rule "R15: R>1 and Not Sufficiently Charged Battery and Not Expensive Hour -> Charge Battery"
    when
        Hypothesis(description == "R>1", value == "true")
        Hypothesis(description == "Sufficiently charged battery", value == "false")
        eval(answer("Expensive Hour", "no"))
    then
        Conclusion c = new Conclusion(Conclusion.CHARGE_BATTERY);
        insert(c);
end

rule "R16: Not R>1"
    when
        eval(answer("Ratio greater than 1", "no"))
    then
        Hypothesis h = new Hypothesis("R>1", "false");
        insert(h);
end

rule "R17: Not R>1 and R>0"
    when
        eval(answer("Ratio greater than 0", "yes"))
    then
        Hypothesis h = new Hypothesis("R>0", "true");
        insert(h);
end

rule "R18: R>0 and Predicted Energy Scarcity"
    when
        Hypothesis(description == "R>0", value == "true")
        eval(answer("Predicted Energy Scarcity", "yes"))
    then
        Hypothesis h = new Hypothesis("Predicted Energy Scarcity", "true");
        insert(h);
end

rule "R19: R>0 and Not Predicted Energy Scarcity"
    when
        Hypothesis(description == "R>0", value == "true")
        eval(answer("Predicted Energy Scarcity", "no"))
    then
        Hypothesis h = new Hypothesis("Predicted Energy Scarcity", "false");
        insert(h);
end

rule "R20: R>0 and Predicted Energy Scarcity and Has EV"
    when
        Hypothesis(description == "R>0", value == "true")
        Hypothesis(description == "Predicted Energy Scarcity", value == "true")
        eval(answer("Has EV", "yes"))
    then
        Hypothesis h = new Hypothesis("Has EV", "true");
        insert(h);
end

rule "R21: R>0 and Predicted Energy Scarcity and Not Has EV"
    when
        Hypothesis(description == "R>0", value == "true")
        Hypothesis(description == "Predicted Energy Scarcity", value == "true")
        eval(answer("Has EV", "no"))
    then
        Hypothesis h = new Hypothesis("Has EV", "false");
        insert(h);
end

rule "R22: R>0 and Has EV and Sufficiently Charged Battery"
    when
        Hypothesis(description == "R>0", value == "true")
        Hypothesis(description == "Has EV", value == "true")
        eval(answer("Sufficiently Charged Battery", "yes"))
    then
        Hypothesis h = new Hypothesis("Sufficiently Charged Battery", "true");
        insert(h);
end

rule "R23: R>0 and Has EV and Not Sufficiently Charged Battery -> Charge Battery"
    when
        Hypothesis(description == "R>0", value == "true")
        Hypothesis(description == "Has EV", value == "true")
        eval(answer("Sufficiently Charged Battery", "no"))
    then
        Conclusion c = new Conclusion(Conclusion.CHARGE_BATTERY);
        insert(c);
end

rule "R24: R>0 and Not Predicted Energy Scarcity and Can Improve R -> Improve R"
    when
        Hypothesis(description == "R>0", value == "true")
        Hypothesis(description == "Predicted Energy Scarcity", value == "false")
        eval(answer("Can Improve R", "yes"))
    then
        Conclusion c = new Conclusion(Conclusion.IMPROVE_R);
        insert(c);
end

rule "R25: R>0 and Not Has EV and Can Improve R -> Improve R"
    when
        Hypothesis(description == "R>0", value == "true")
        Hypothesis(description == "Has EV", value == "false")
        eval(answer("Can Improve R", "yes"))
    then
        Conclusion c = new Conclusion(Conclusion.IMPROVE_R);
        insert(c);
end
 
rule "R26: R>0 and Sufficiently Charged Battery and Can Improve R -> Improve R"
    when
        Hypothesis(description == "R>0", value == "true")
        Hypothesis(description == "Sufficiently Charged Battery", value == "true")
        eval(answer("Can Improve R", "yes"))
    then
        Conclusion c = new Conclusion(Conclusion.IMPROVE_R);
        insert(c);
end

rule "R27: R>0 and Not Predicted Energy Scarcity and Cannot Improve R"
    when
        Hypothesis(description == "R>0", value == "true")
        Hypothesis(description == "Predicted Energy Scarcity", value == "false")
        eval(answer("Can Improve R", "no"))
    then
        Hypothesis h = new Hypothesis("Improve R", "false");
        insert(h);
end

rule "R28: R>0 and Not Has EV and Cannot Improve R"
    when
        Hypothesis(description == "R>0", value == "true")
        Hypothesis(description == "Has EV", value == "false")
        eval(answer("Can Improve R", "no"))
    then
        Hypothesis h = new Hypothesis("Improve R", "false");
        insert(h);
end

rule "R29: R>0 and Sufficiently Charged Battery and Cannot Improve R"
    when
        Hypothesis(description == "R>0", value == "true")
        Hypothesis(description == "Sufficiently Charged Battery", value == "true")
        eval(answer("Can Improve R", "no"))
    then
        Hypothesis h = new Hypothesis("Improve R", "false");
        insert(h);
end

rule "R30: R>0 and Cannot Improve R and Not R=1 -> Buy Cheapest Market"
    when
        Hypothesis(description == "R>0", value == "true")
        Hypothesis(description == "Improve R", value == "false")
        eval(answer("Ratio equal to 1", "no"))
    then
        Conclusion c = new Conclusion(Conclusion.BUY_CHEAPEST_MARKET);
        insert(c);
end

rule "R31: R>0 and Cannot Improve R and R=1 -> No operation needed"
    when
        Hypothesis(description == "R>0", value == "true")
        Hypothesis(description == "Improve R", value == "false")
        eval(answer("Ratio equal to 1", "yes"))
    then
        Conclusion c = new Conclusion(Conclusion.NO_OPERATION_NEEDED);
        insert(c);
end

rule "R32: Not R>0"
    when
        eval(answer("Ratio greater than 0", "no"))
    then
        Hypothesis h = new Hypothesis("R>0", "false");
        insert(h);
end

rule "R33: Not R>0 and Has EV"
    when
        Hypothesis(description == "R>0", value == "false")
        eval(answer("Has EV", "yes"))
    then
        Hypothesis h = new Hypothesis("Has EV", "true");
        insert(h);
end

rule "R34: Not R>0 and Not Has EV"
    when
        Hypothesis(description == "R>0", value == "false")
        eval(answer("Has EV", "no"))
    then
        Hypothesis h = new Hypothesis("Has EV", "false");
        insert(h);
end

rule "R35: Not R>0 and Not Sufficiently Charged Battery -> Charge"
    when
        Hypothesis(description == "R>0", value == "false")
        eval(answer("Sufficiently Charged Battery", "no"))
    then
        Conclusion c = new Conclusion(Conclusion.CHARGE_BATTERY);
        insert(c);
end

rule "R36: Not R>0 and Sufficiently Charged Battery"
    when
        Hypothesis(description == "R>0", value == "false")
        eval(answer("Sufficiently Charged Battery", "yes"))
    then
        Hypothesis h = new Hypothesis("Sufficiently Charged Battery", "true");
        insert(h);
end

rule "R37: Not R>0 and Sufficiently Charged Battery and Predicted Energy Scarcity"
    when
        Hypothesis(description == "R>0", value == "false")
        Hypothesis(description == "Sufficiently Charged Battery", value == "true")
        eval(answer("Predicted Energy Scarcity", "yes"))
    then
        Hypothesis h = new Hypothesis("Predicted Energy Scarcity", "true");
        insert(h);
end

rule "R38: Not R>0 and Sufficiently Charged Battery and Not Predicted Energy Scarcity -> Use Battery"
    when
        Hypothesis(description == "R>0", value == "false")
        Hypothesis(description == "Sufficiently Charged Battery", value == "true")
        eval(answer("Predicted Energy Scarcity", "no"))
    then
        Conclusion c = new Conclusion(Conclusion.USE_BATTERY);
        insert(c);
end

rule "R39: Not R>0 and Not Predicted Energy Scarcity and Expensive Hour -> Shift load to essential consumption"
    when
        Hypothesis(description == "R>0", value == "false")
        Hypothesis(description == "Predicted Energy Scarcity", value == "false")
        eval(answer("Expensive Hour", "yes"))
    then
        Conclusion c = new Conclusion(Conclusion.SHIFT_LOAD);
        insert(c);
end

rule "R40: Not R>0 and Not Predicted Energy Scarcity and Not Expensive Hour -> Keep Buying"
    when
        Hypothesis(description == "R>0", value == "false")
        Hypothesis(description == "Predicted Energy Scarcity", value == "false")
        eval(answer("Expensive Hour", "no"))
    then
        Conclusion c = new Conclusion(Conclusion.KEEP_BUYING);
        insert(c);
end

rule "R41: Not R>0 and Not Has EV and Expensive Hour -> Shift load to essential consumption"
    when
        Hypothesis(description == "R>0", value == "false")
        Hypothesis(description == "Has EV", value == "false")
        eval(answer("Expensive Hour", "yes"))
    then
        Conclusion c = new Conclusion(Conclusion.SHIFT_LOAD);
        insert(c);
end

rule "R42: Not R>0 and Not Has EV and Not Expensive Hour -> Keep Buying"
    when
        Hypothesis(description == "R>0", value == "false")
        Hypothesis(description == "Has EV", value == "false")
        eval(answer("Expensive Hour", "no"))
    then
        Conclusion c = new Conclusion(Conclusion.KEEP_BUYING);
        insert(c);
end


