package org.engcia;

import org.engcia.model.Evidence;
import org.engcia.model.Hypothesis;
import org.engcia.model.Conclusion;
import org.engcia.model.Fact;

import org.engcia.model.Device;
import org.engcia.model.Participant;
import org.engcia.model.Weather;
import org.engcia.model.Period;

import function org.engcia.view.UI.answer;

import function org.engcia.sample.DroolsTest.chooseDevicesTurnOn;
import function org.engcia.sample.DroolsTest.chooseDevicesNonEssential;
import function org.engcia.fuzzy.FuzzyLogic.fuzzify;

query "Conclusions"
    $conclusion : Conclusion()
end

global java.lang.String id;

rule "R0: Is Manager"
    when
        eval(answer("Are you the manager", "yes"))
    then
        Hypothesis h = new Hypothesis("manager", "true");
        insert(h);
end

rule "R101: Ratio greater than 1"
    when
        Hypothesis(description == "manager", value == "true")
        Period(id == id, getRatio() > 1)
    then
        System.out.println("R101: Ratio greater than 1");
        Hypothesis h = new Hypothesis("R", "greater");
        insert(h);
end

rule "R102: Ratio equal or less than 1"
    when
        Hypothesis(description == "manager", value == "true")
        Period(id == id, getRatio() <= 1)
    then
        System.out.println("R102: Ratio equal or less than 1");
        Hypothesis h = new Hypothesis("R", "equal or less");
        insert(h);
end

rule "R103: Ratio greater than 1 and Predicted Energy Scarcity"
    when
        Hypothesis(description == "manager", value == "true")
        Hypothesis(description == "R", value == "greater")
        $w : Weather(evaluatePredictedEnergyScarcity())
    then
        System.out.println("R103: Ratio greater than 1 and Predicted Energy Scarcity");
        Hypothesis h = new Hypothesis("predicted energy scarcity", "true");
        insert(h);
end

rule "R104: Ratio greater than 1 and Not Predicted Energy Scarcity"
    when
        Hypothesis(description == "manager", value == "true")
        Hypothesis(description == "R", value == "greater")
        $w : Weather(!evaluatePredictedEnergyScarcity())
    then
        System.out.println("R104: Ratio greater than 1 and Not Predicted Energy Scarcity");
        Hypothesis h = new Hypothesis("predicted energy scarcity", "false");
        insert(h);
end

rule "R105: Ratio greater than 1 and PES and Battery Sufficiently Charged"
    when
        Hypothesis(description == "manager", value == "true")
        Hypothesis(description == "R", value == "greater")
        Hypothesis(description == "predicted energy scarcity", value == "true")
        $p : Period(id == id, areBatteriesSufficientlyCharged())
    then
        System.out.println("R105: Ratio greater than 1 and PES and Battery Sufficiently Charged");
        Conclusion c = new Conclusion(Conclusion.CHARGE_BATTERY);
        insert(c);
end

rule "R106: Ratio greater than 1 and PES and Not Battery Sufficiently Charged"
    when
        Hypothesis(description == "manager", value == "true")
        Hypothesis(description == "R", value == "greater")
        Hypothesis(description == "predicted energy scarcity", value == "true")
        $p : Period(id == id, areBatteriesSufficientlyCharged() == false)
    then
        System.out.println("R106: Ratio greater than 1 and PES and Not Battery Sufficiently Charged");
        Hypothesis h = new Hypothesis("battery sufficiently charged", "true");
        insert(h);
end

rule "R107.1: Ratio greater than 1 and Battery Sufficiently Charged and Community Demand"
    when
        Hypothesis(description == "manager", value == "true")
        Hypothesis(description == "R", value == "greater")
        Hypothesis(description == "battery sufficiently charged", value == "true")
        Period(id == id, communityDemand())
    then
        System.out.println("R107.1: Ratio greater than 1 and Battery Sufficiently Charged and Community Demand");
        Conclusion c = new Conclusion(Conclusion.SELL_COMMUNITY_MARKET);
        insert(c);
end

rule "R107.2: Ratio greater than 1 and Battery Sufficiently Charged and not Community Demand"
    when
        Hypothesis(description == "manager", value == "true")
        Hypothesis(description == "R", value == "greater")
        Hypothesis(description == "battery sufficiently charged", value == "true")
        Period(id == id, communityDemand() == false)
    then
        System.out.println("R107.2: Ratio greater than 1 and Battery Sufficiently Charged and not Community Demand");
        Hypothesis h = new Hypothesis("community demand", "false");
        insert(h);
end

rule "R108.1: Ratio greater than 1 and not PES and Community Demand"
    when
        Hypothesis(description == "manager", value == "true")
        Hypothesis(description == "R", value == "greater")
        Hypothesis(description == "predicted energy scarcity", value == "false")
        Period(id == id, communityDemand())
    then
        System.out.println("R108.1: Ratio greater than 1 and not PES and Community Demand");
        Conclusion c = new Conclusion(Conclusion.SELL_COMMUNITY_MARKET);
        insert(c);
end

rule "R108.2: Ratio greater than 1 and not PES and not Community Demand"
    when
        Hypothesis(description == "manager", value == "true")
        Hypothesis(description == "R", value == "greater")
        Hypothesis(description == "predicted energy scarcity", value == "false")
        Period(id == id, communityDemand() == false)
    then
        System.out.println("R108.2: Ratio greater than 1 and not PES and not Community Demand");
        Hypothesis h = new Hypothesis("community demand", "false");
        insert(h);
end

rule "R109: Ratio greater than 1 and Not Community Demand and External Market Demand"
    when
        Hypothesis(description == "manager", value == "true")
        Hypothesis(description == "R", value == "greater")
        Hypothesis(description == "community demand", value == "false")
        eval(answer("external market demand", "yes"))
    then
        System.out.println("R109: Ratio greater than 1 and Not Community Demand and External Market Demand");
        Conclusion c = new Conclusion(Conclusion.SELL_EXTERNAL_MARKET);
        insert(c);
end

rule "R110: Ratio greater than 1 and Not Community Demand and External Market Demand"
    when
        Hypothesis(description == "manager", value == "true")
        Hypothesis(description == "R", value == "greater")
        Hypothesis(description == "community demand", value == "false")
        eval(answer("external market demand", "no"))
    then
        System.out.println("R110: Ratio greater than 1 and Not Community Demand and External Market Demand");
        Conclusion c = new Conclusion(Conclusion.SEND_GRID);
        insert(c);
end


rule "R111: R equal or less than 1 and Currently in Energy Scarcity"
    when
        Hypothesis(description == "manager", value == "true")
        Hypothesis(description == "R", value == "equal or less")
        eval(answer("currently in energy scarcity", "yes"))
    then
        System.out.println("R111: R equal or less than 1 and Currently in Energy Scarcity");
        Hypothesis h = new Hypothesis("currently in energy scarcity", "true");
        insert(h);
end

rule "R112: R equal or less than 1 and Not Currently in Energy Scarcity"
    when
        Hypothesis(description == "manager", value == "true")
        Hypothesis(description == "R", value == "equal or less")
        eval(answer("currently in energy scarcity", "no"))
    then
        System.out.println("R112: R equal or less than 1 and Not Currently in Energy Scarcity");
        Hypothesis h = new Hypothesis("currently in energy scarcity", "false");
        insert(h);
end

rule "R113: Currently in Energy Scarcity and Batteries are charged"
    when
        Hypothesis(description == "manager", value == "true")
        Hypothesis(description == "currently in energy scarcity", value == "true")
        $p : Period(id == id, areBatteriesSufficientlyCharged())
    then
        System.out.println("R113: Currently in Energy Scarcity and Batteries are charged");
        Conclusion c = new Conclusion(Conclusion.USE_BATTERY);
        insert(c);
end

rule "R114: Currently in Energy Scarcity and Batteries are not charged"
    when
        Hypothesis(description == "manager", value == "true")
        Hypothesis(description == "currently in energy scarcity", value == "true")
        $p : Period(id == id, areBatteriesSufficientlyCharged() == false)
    then
        System.out.println("R114: Currently in Energy Scarcity and Batteries are not charged");
        Hypothesis h = new Hypothesis("batteries are charged", "false");
        insert(h);
end

rule "R115.1: Not Currently in Energy Scarcity and no Participant with surplus"
    when
        Hypothesis(description == "manager", value == "true")
        Hypothesis(description == "currently in energy scarcity", value == "false")
        $p : Period(id == id, participantsWithSurplus() == false)
    then
        System.out.println("R115.1: Not Currently in Energy Scarcity and no Participant with surplus");
        Hypothesis h = new Hypothesis("participants with surplus", "false");
        insert(h);
end

rule "R115.2: Not Currently in Energy Scarcity and Participant with surplus"
    when
        Hypothesis(description == "manager", value == "true")
        Hypothesis(description == "currently in energy scarcity", value == "false")
        $p : Period(id == id, participantsWithSurplus())
    then
        System.out.println("R115.2: Not Currently in Energy Scarcity and Participant with surplus");
        Conclusion c = new Conclusion(Conclusion.BALANCE_R);
        insert(c);
end


rule "R116.1: Batteries are not charged and no Participant with surplus"
    when
        Hypothesis(description == "manager", value == "true")
        Hypothesis(description == "batteries are charged", value == "false")
        $p : Period(id == id, participantsWithSurplus() == false)
    then
        System.out.println("R116.1: Batteries are not charged and no Participant with surplus");
        Hypothesis h = new Hypothesis("participants with surplus", "false");
        insert(h);
end

rule "R116.2: Batteries are not charged and Participant with surplus"
    when
        Hypothesis(description == "manager", value == "true")
        Hypothesis(description == "batteries are charged", value == "false")
        $p : Period(id == id, participantsWithSurplus())
    then
        System.out.println("R116.2: Batteries are not charged and Participant with surplus");
        Conclusion c = new Conclusion(Conclusion.BALANCE_R);
        insert(c);
end

rule "R116: Not Participant with surplus and Predicted Energy Scarcity"
    when
        Hypothesis(description == "manager", value == "true")
        Hypothesis(description == "participants with surplus", value == "false")
        $w : Weather(evaluatePredictedEnergyScarcity())
    then
        System.out.println("R116: Not Participant with surplus and Predicted Energy Scarcity");
        Conclusion c = new Conclusion(Conclusion.ADJUST_THRESHOLD);
        insert(c);
end

rule "R117: Not Participant with surplus and Not Predicted Energy Scarcity"
    when
        Hypothesis(description == "manager", value == "true")
        Hypothesis(description == "participants with surplus", value == "false")
        $w : Weather(!evaluatePredictedEnergyScarcity())
    then
        System.out.println("R117: Not Participant with surplus and Not Predicted Energy Scarcity");
        Hypothesis h = new Hypothesis("predicted energy scarcity", "false");
        insert(h);
end

rule "R118: Not Predicted Energy Scarcity and Expensive Hour"
    when
        Hypothesis(description == "manager", value == "true")
        Hypothesis(description == "predicted energy scarcity", value == "false")
        eval(answer("expensive hour", "yes"))
    then
        System.out.println("R118: Not Predicted Energy Scarcity and Expensive Hour");
        Hypothesis h = new Hypothesis("expensive hour", "true");
        insert(h);
end

rule "R119: Not Predicted Energy Scarcity and Not Expensive Hour"
    when
        Hypothesis(description == "manager", value == "true")
        Hypothesis(description == "predicted energy scarcity", value == "false")
        eval(answer("expensive hour", "no"))
    then
        System.out.println("R119: Not Predicted Energy Scarcity and Not Expensive Hour");
        Conclusion c = new Conclusion(Conclusion.BUY_EXTERNAL_MARKET);
        insert(c);
end

rule "R120: Expensive Hour and Sufficiently Charged Battery"
    when
        Hypothesis(description == "manager", value == "true")
        Hypothesis(description == "expensive hour", value == "true")
        $p : Period(id == id, areBatteriesSufficientlyCharged())
    then
        System.out.println("R120: Expensive Hour and Sufficiently Charged Battery");
        Conclusion c = new Conclusion(Conclusion.USE_BATTERY);
        insert(c);
end

rule "R120.1: Expensive Hour and Not Sufficiently Charged Battery"
    when
        Hypothesis(description == "manager", value == "true")
        Hypothesis(description == "expensive hour", value == "true")
        $p : Period(id == id, areBatteriesSufficientlyCharged() == false)
    then
        System.out.println("R120.1: Expensive Hour and Not Sufficiently Charged Battery");
        Conclusion c = new Conclusion(Conclusion.BUY_EXTERNAL_MARKET);
        insert(c);
end
rule "R01: Is Participant"
    when
        eval(answer("Are you the manager", "no"))
    then
        Hypothesis h = new Hypothesis("manager", "false");
        insert(h);
end
rule "R201: R>1"
    when
        Hypothesis(description == "manager", value == "false")
        Participant(id == id, getRatio() > 1)
    then
        System.out.println("R1 - R>1");
        Hypothesis h = new Hypothesis("R>1", "true");
        insert(h);
end

rule "R202: R>1 and Predicted Energy Scarcity"
    when
        Hypothesis(description == "manager", value == "false")
        Hypothesis(description == "R>1", value == "true")
        $w : Weather(evaluatePredictedEnergyScarcity())
        $p : Participant(id == id)
    then
        System.out.println("R2 - R>1 and Predicted Energy Scarcity");
        $p.setEvThreshold($w.getThreshold());
        update($p);
        Hypothesis h = new Hypothesis("Predicted Energy Scarcity", "true");
        insert(h);
end

rule "R203: R>1 and Not Predicted Energy Scarcity"
    when
        Hypothesis(description == "manager", value == "false")
        Hypothesis(description == "R>1", value == "true")
        $w : Weather(!evaluatePredictedEnergyScarcity())
        $p : Participant(id == id)
    then
        System.out.println("R3 - R>1 and Not Predicted Energy Scarcity");
        $p.setEvThreshold($w.getThreshold());
        update($p);
        Hypothesis h = new Hypothesis("Predicted Energy Scarcity", "false");
        insert(h);
end

rule "R204: R>1 and Predicted Energy Scarcity and Has EV"
    when
        Hypothesis(description == "manager", value == "false")
        Hypothesis(description == "R>1", value == "true")
        Hypothesis(description == "Predicted Energy Scarcity", value == "true")
        Participant(id == id, hasEv())
    then
        System.out.println("R4 - R>1 and Predicted Energy Scarcity and Has EV");
        Hypothesis h = new Hypothesis("Has EV", "true");
        insert(h);
end

rule "R205: R>1 and Predicted Energy Scarcity and Has Not EV -> Sell to the community market"
    when
        Hypothesis(description == "manager", value == "false")
        Hypothesis(description == "R>1", value == "true")
        Hypothesis(description == "Predicted Energy Scarcity", value == "true")
        Participant(id == id, hasEv() == false)
    then
        System.out.println("R5 - R>1 and Predicted Energy Scarcity and Not Has EV -> Sell to the community market");
        Conclusion c = new Conclusion(Conclusion.SELL_COMMUNITY_MARKET);
        insert(c);
end

rule "R206: R>1 and Has EV and Sufficiently Charged Battery -> Sell to the community market"
    when
        Hypothesis(description == "manager", value == "false")
        Hypothesis(description == "R>1", value == "true")
        Hypothesis(description == "Has EV", value == "true")
        $p : Participant(id == id, isEvSufficientlyCharged())
        Hypothesis(description == "Predicted Energy Scarcity", value == "true")
    then
        System.out.println($p.isEvSufficientlyCharged());
        System.out.println("R6 - R>1 and Has EV and Sufficiently Charged Battery -> Sell to the community market");
        Conclusion c = new Conclusion(Conclusion.SELL_COMMUNITY_MARKET);
        insert(c);
end

rule "R207: R>1 and Has EV and Not Sufficiently Charged Battery"
    when
        Hypothesis(description == "manager", value == "false")
        Hypothesis(description == "R>1", value == "true")
        Hypothesis(description == "Has EV", value == "true")
        $p : Participant(id == id, isEvSufficientlyCharged() == false)
        Hypothesis(description == "Predicted Energy Scarcity", value == "true")

    then
        System.out.println("R7 - R>1 and Has EV and Not Sufficiently Charged Battery");
        Conclusion c = new Conclusion(Conclusion.CHARGE_BATTERY);
        insert(c);
end


rule "R208: R>1 and Not Predicted Energy Scarcity and Wants to shift load -> Shift Load"
    when
        Hypothesis(description == "manager", value == "false")
        Hypothesis(description == "R>1", value == "true")
        Hypothesis(description == "Predicted Energy Scarcity", value == "false")
        eval(answer("Wants to shift load", "yes"))
        $p : Participant(id == id)
    then
        boolean hasDevice = chooseDevicesTurnOn($p);
        if(hasDevice){
            Conclusion c = new Conclusion(Conclusion.LOAD_SHIFTED);
            insert(c);
        }else{
            Hypothesis h = new Hypothesis("Wants to shift load", "false");
            insert(h);
        }
end

rule "R209: R>1 and Not Predicted Energy Scarcity and Not Wants to shift load"
    when
        Hypothesis(description == "manager", value == "false")
        Hypothesis(description == "R>1", value == "true")
        Hypothesis(description == "Predicted Energy Scarcity", value == "false")
        eval(answer("Wants to shift load", "no"))
    then
        Hypothesis h = new Hypothesis("Wants to shift load", "false");
        insert(h);
end

rule "R210: R>1 and Not Wants to shift load and Has EV"
    when
        Hypothesis(description == "manager", value == "false")
        Hypothesis(description == "R>1", value == "true")
        Hypothesis(description == "Wants to shift load", value == "false")
        Participant(id == id, hasEv())
    then
        Hypothesis h = new Hypothesis("Has EV", "true");
        insert(h);
end

rule "R211: R>1 and Not Wants to shift load and Not Has EV -> Sell"
    when
        Hypothesis(description == "manager", value == "false")
        Hypothesis(description == "R>1", value == "true")
        Hypothesis(description == "Wants to shift load", value == "false")
        Participant(id == id, hasEv() == false)
    then
        System.out.println("R13: R>1 and Not Wants to shift load and Not Has EV -> Sell");
        Conclusion c = new Conclusion(Conclusion.SELL_COMMUNITY_MARKET);
        insert(c);
end

rule "R212: R>1 and Has EV and Sufficiently Charged Battery -> Sell"
    when
        Hypothesis(description == "manager", value == "false")
        Hypothesis(description == "R>1", value == "true")
        Hypothesis(description == "Has EV", value == "true")
        $p : Participant(id == id, isEvSufficientlyCharged())
    then
        Conclusion c = new Conclusion(Conclusion.SELL_COMMUNITY_MARKET);
        insert(c);
end

rule "R213: R>1 and Has EV and Not Sufficiently Charged Battery"
    when
        Hypothesis(description == "manager", value == "false")
        Hypothesis(description == "R>1", value == "true")
        Hypothesis(description == "Has EV", value == "true")
        $p : Participant(id == id, isEvSufficientlyCharged() == false)
    then
        Hypothesis h = new Hypothesis("Sufficiently charged battery", "false");
        insert(h);
end

rule "R214: R>1 and Not Sufficiently Charged Battery and Expensive Hour -> Sell"
    when
        Hypothesis(description == "manager", value == "false")
        Hypothesis(description == "R>1", value == "true")
        Hypothesis(description == "Sufficiently charged battery", value == "false")
        eval(answer("Expensive Hour", "yes"))
    then
        Conclusion c = new Conclusion(Conclusion.SELL_COMMUNITY_MARKET);
        insert(c);
end

rule "R215: R>1 and Not Sufficiently Charged Battery and Not Expensive Hour -> Charge Battery"
    when
        Hypothesis(description == "manager", value == "false")
        Hypothesis(description == "R>1", value == "true")
        Hypothesis(description == "Sufficiently charged battery", value == "false")
        eval(answer("Expensive Hour", "no"))
    then
        Conclusion c = new Conclusion(Conclusion.CHARGE_BATTERY);
        insert(c);
end

rule "R216: Not R>1"
    when
        Hypothesis(description == "manager", value == "false")
        Participant(id == id, getRatio() <= 1)
    then
        Hypothesis h = new Hypothesis("R>1", "false");
        insert(h);
end

rule "R217: Not R>1 and R>0"
    when
        Hypothesis(description == "manager", value == "false")
        Participant(id == id, getRatio() > 0)
    then
        Hypothesis h = new Hypothesis("R>0", "true");
        insert(h);
end

rule "R218: R>0 and Predicted Energy Scarcity"
    when
        Hypothesis(description == "manager", value == "false")
        Hypothesis(description == "R>0", value == "true")
        $w : Weather(evaluatePredictedEnergyScarcity())
        $p : Participant(id == id)
    then
        System.out.println("R20 - R>0 and Predicted Energy Scarcity");
        $p.setEvThreshold($w.getThreshold());
        update($p);
        Hypothesis h = new Hypothesis("Predicted Energy Scarcity", "true");
        insert(h);
end

rule "R219: R>0 and Not Predicted Energy Scarcity"
    when
        Hypothesis(description == "manager", value == "false")
        Hypothesis(description == "R>0", value == "true")
        $w : Weather(!evaluatePredictedEnergyScarcity())
        $p : Participant(id == id)
    then
        System.out.println("R21 - R>0 and Not Predicted Energy Scarcity");
        $p.setEvThreshold($w.getThreshold());
        update($p);
        Hypothesis h = new Hypothesis("Predicted Energy Scarcity", "false");
        insert(h);
end

rule "R220: R>0 and Predicted Energy Scarcity and Has EV"
    when
        Hypothesis(description == "manager", value == "false")
        Hypothesis(description == "R>0", value == "true")
        Hypothesis(description == "Predicted Energy Scarcity", value == "true")
        Participant(id == id, hasEv())
    then
        System.out.println("R22 - R>0 and Predicted Energy Scarcity and Has EV");
        Hypothesis h = new Hypothesis("Has EV", "true");
        insert(h);
end

rule "R221: R>0 and Predicted Energy Scarcity and Not Has EV"
    when
        Hypothesis(description == "manager", value == "false")
        Hypothesis(description == "R>0", value == "true")
        Hypothesis(description == "Predicted Energy Scarcity", value == "true")
        Participant(id == id, hasEv() == false)
    then
        System.out.println("R23 - R>0 and Predicted Energy Scarcity and Not Has EV");
        Hypothesis h = new Hypothesis("Has EV", "false");
        insert(h);
end

rule "R222: R>0 and Has EV and Sufficiently Charged Battery"
    when
        Hypothesis(description == "manager", value == "false")
        Hypothesis(description == "R>0", value == "true")
        Hypothesis(description == "Has EV", value == "true")
        $p : Participant(id == id, isEvSufficientlyCharged())
    then
        System.out.println("R24: R>0 and Has EV and Sufficiently Charged Battery");
        Hypothesis h = new Hypothesis("Sufficiently Charged Battery", "true");
        insert(h);
end

rule "R223: R>0 and Has EV and Not Sufficiently Charged Battery -> Charge Battery"
    when
        Hypothesis(description == "manager", value == "false")
        Hypothesis(description == "R>0", value == "true")
        Hypothesis(description == "Has EV", value == "true")
        $p : Participant(id == id, isEvSufficientlyCharged() == false)
    then
        System.out.println("R25: R>0 and Has EV and Not Sufficiently Charged Battery -> Charge Battery");
        Conclusion c = new Conclusion(Conclusion.CHARGE_BATTERY);
        insert(c);
end

rule "R224: R>0 and Not Predicted Energy Scarcity and Can Improve R -> Improve R"
    when
        Hypothesis(description == "manager", value == "false")
        Hypothesis(description == "R>0", value == "true")
        Hypothesis(description == "Predicted Energy Scarcity", value == "false")
        $p : Participant(id == id)
        eval(answer("Do you wish to lower your consumption", "yes"))
    then
        boolean hasDevice = chooseDevicesNonEssential($p);
        if(hasDevice){
            System.out.println("R26: R>0 and Not Predicted Energy Scarcity and Can Improve R -> Improve R");
            Conclusion c = new Conclusion(Conclusion.IMPROVE_R);
            insert(c);
        }else{
            Hypothesis h = new Hypothesis("Improve R", "false");
            insert(h);
        }
end

rule "R225: R>0 and Not Has EV and Can Improve R -> Improve R"
    when
        Hypothesis(description == "manager", value == "false")
        Hypothesis(description == "R>0", value == "true")
        Hypothesis(description == "Has EV", value == "false")
        eval(answer("Do you wish to lower your consumption", "yes"))
    then
        System.out.println("R27: R>0 and Not Has EV and Can Improve R -> Improve R");
        Conclusion c = new Conclusion(Conclusion.IMPROVE_R);
        insert(c);
end

rule "R226: R>0 and Sufficiently Charged Battery and Can Improve R -> Improve R"
    when
        Hypothesis(description == "manager", value == "false")
        Hypothesis(description == "R>0", value == "true")
        Hypothesis(description == "Sufficiently Charged Battery", value == "true")
        eval(answer("Do you wish to lower your consumption", "yes"))
    then
        System.out.println("R28: R>0 and Sufficiently Charged Battery and Can Improve R -> Improve R");
        Conclusion c = new Conclusion(Conclusion.IMPROVE_R);
        insert(c);
end

rule "R227: R>0 and Not Predicted Energy Scarcity and Cannot Improve R"
    when
        Hypothesis(description == "manager", value == "false")
        Hypothesis(description == "R>0", value == "true")
        Hypothesis(description == "Predicted Energy Scarcity", value == "false")
        eval(answer("Do you wish to lower your consumption", "no"))
    then
        System.out.println("R29: R>0 and Not Predicted Energy Scarcity and Cannot Improve R");
        Hypothesis h = new Hypothesis("Improve R", "false");
        insert(h);
end

rule "R228: R>0 and Not Has EV and Cannot Improve R"
    when
        Hypothesis(description == "manager", value == "false")
        Hypothesis(description == "R>0", value == "true")
        Hypothesis(description == "Has EV", value == "false")
        eval(answer("Do you wish to lower your consumption", "no"))
    then
        System.out.println("R30: R>0 and Not Has EV and Cannot Improve R");
        Hypothesis h = new Hypothesis("Improve R", "false");
        insert(h);
end

rule "R229: R>0 and Sufficiently Charged Battery and Cannot Improve R"
    when
        Hypothesis(description == "manager", value == "false")
        Hypothesis(description == "R>0", value == "true")
        Hypothesis(description == "Sufficiently Charged Battery", value == "true")
        eval(answer("Do you wish to lower your consumption", "no"))
    then
        System.out.println("R31: R>0 and Sufficiently Charged Battery and Cannot Improve R");
        Hypothesis h = new Hypothesis("Improve R", "false");
        insert(h);
end

rule "R230: R>0 and Cannot Improve R and Not R=1 -> Buy Cheapest Market"
    when
        Hypothesis(description == "manager", value == "false")
        Hypothesis(description == "R>0", value == "true")
        Hypothesis(description == "Improve R", value == "false")
        Participant(id == id, getRatio() != 1)
    then
        System.out.println("R32: R>0 and Cannot Improve R and Not R=1 -> Buy Cheapest Market");
        Conclusion c = new Conclusion(Conclusion.BUY_CHEAPEST_MARKET);
        insert(c);
end

rule "R231: R>0 and Cannot Improve R and R=1 -> No operation needed"
    when
        Hypothesis(description == "manager", value == "false")
        Hypothesis(description == "R>0", value == "true")
        Hypothesis(description == "Improve R", value == "false")
        Participant(id == id, getRatio() == 1)
    then
        System.out.println("R231: R>0 and Cannot Improve R and R=1 -> No operation needed");
        Conclusion c = new Conclusion(Conclusion.NO_OPERATION_NEEDED);
        insert(c);
end

rule "R232: Not R>0"
    when
        Hypothesis(description == "manager", value == "false")
        Participant(id == id, getRatio() == 0)
    then
        System.out.println("R232: Not R>0");
        Hypothesis h = new Hypothesis("R>0", "false");
        insert(h);
end

rule "R233: Not R>0 and Has EV"
    when
        Hypothesis(description == "manager", value == "false")
        Hypothesis(description == "R>0", value == "false")
        Participant(id == id, hasEv())
    then
        System.out.println("R233: Not R>0 and Has EV");
        Hypothesis h = new Hypothesis("Has EV", "true");
        insert(h);
end

rule "R234: Not R>0 and Not Has EV"
    when
        Hypothesis(description == "manager", value == "false")
        Hypothesis(description == "R>0", value == "false")
        Participant(id == id, hasEv() == false)
    then
        System.out.println("R36: Not R>0 and Not Has EV");
        Hypothesis h = new Hypothesis("Has EV", "false");
        insert(h);
end

rule "R235: Not R>0 and Has EV and Predicted Energy Scarcity"
    when
        Hypothesis(description == "manager", value == "false")
        Hypothesis(description == "R>0", value == "false")
        Hypothesis(description == "Has EV", value == "true")
        $w : Weather(evaluatePredictedEnergyScarcity())
        $p : Participant(id == id)
    then
        System.out.println("R235: Not R>0 and Has EV and Predicted Energy Scarcity");
        Hypothesis h = new Hypothesis("Predicted Energy Scarcity", "true");
        insert(h);
end

rule "R238: Not R>0 and Has Ev and Not Predicted Energy Scarcity"
    when
        Hypothesis(description == "manager", value == "false")
        Hypothesis(description == "R>0", value == "false")
        Hypothesis(description == "Has EV", value == "true")
        $w : Weather(!evaluatePredictedEnergyScarcity())
        $p : Participant(id == id)
    then
        System.out.println("R238: Not R>0 and Sufficiently Charged Battery and Not Predicted Energy Scarcity -> Use Battery");
        Hypothesis h = new Hypothesis("Predicted Energy Scarcity", "false");
        insert(h);
end

rule "R236: Not R>0 and Predicted Energy Scarcity and Sufficiently Charged Battery -> Use Battery"
    when
        Hypothesis(description == "manager", value == "false")
        Hypothesis(description == "R>0", value == "false")
        Hypothesis(description == "Predicted Energy Scarcity", value == "true")
        $p : Participant(id == id, isEvSufficientlyCharged())
    then
        System.out.println("R38: Not R>0 and Predicted Energy Scarcity and Sufficiently Charged Battery");
        Conclusion c = new Conclusion(Conclusion.USE_BATTERY);
        insert(c);
end

rule "R235: Not R>0 and Predicted Energy Scarcity and Not Sufficiently Charged Battery -> Charge"
    when
        Hypothesis(description == "manager", value == "false")
        Hypothesis(description == "R>0", value == "false")
        Hypothesis(description == "Predicted Energy Scarcity", value == "true")
        $p : Participant(id == id, isEvSufficientlyCharged() == false)
    then
        System.out.println("R37: Not R>0 and Predicted Energy Scarcity and Not Sufficiently Charged Battery -> Charge");
        Conclusion c = new Conclusion(Conclusion.CHARGE_BATTERY);
        insert(c);
end


rule "R239: Not R>0 and Not Predicted Energy Scarcity and Expensive Hour -> Shift load to essential consumption"
    when
        Hypothesis(description == "manager", value == "false")
        Hypothesis(description == "R>0", value == "false")
        Hypothesis(description == "Predicted Energy Scarcity", value == "false")
        eval(answer("Expensive Hour", "yes"))
    then
        Conclusion c = new Conclusion(Conclusion.SHIFT_LOAD_ESSENTIAL);
        insert(c);
end

rule "R240: Not R>0 and Not Predicted Energy Scarcity and Not Expensive Hour -> Keep Buying"
    when
        Hypothesis(description == "manager", value == "false")
        Hypothesis(description == "R>0", value == "false")
        Hypothesis(description == "Predicted Energy Scarcity", value == "false")
        eval(answer("Expensive Hour", "no"))
    then
        System.out.println("R42: Not R>0 and Not Predicted Energy Scarcity and Not Expensive Hour -> Keep Buying");
        Conclusion c = new Conclusion(Conclusion.KEEP_BUYING);
        insert(c);
end

rule "R241: Not R>0 and Not Has EV and Expensive Hour -> Shift load to essential consumption"
    when
        Hypothesis(description == "manager", value == "false")
        Hypothesis(description == "R>0", value == "false")
        Hypothesis(description == "Has EV", value == "false")
        $p : Participant(id == id)
        eval(answer("Expensive Hour", "yes"))
    then
        boolean hasDevice = chooseDevicesNonEssential($p);
                if(hasDevice){
                    System.out.println("R43: Not R>0 and Not Has EV and Expensive Hour -> Shift load to essential consumption");
                    Conclusion c = new Conclusion(Conclusion.SHIFT_LOAD_ESSENTIAL);
                    insert(c);
                }else{
                    Conclusion c = new Conclusion(Conclusion.KEEP_BUYING);
                    insert(c);
                }
end

rule "R242: Not R>0 and Not Has EV and Not Expensive Hour -> Keep Buying"
    when
        Hypothesis(description == "manager", value == "false")
        Hypothesis(description == "R>0", value == "false")
        Hypothesis(description == "Has EV", value == "false")
        eval(answer("Expensive Hour", "no"))
    then
        System.out.println("R44: Not R>0 and Not Has EV and Not Expensive Hour -> Keep Buying");
        Conclusion c = new Conclusion(Conclusion.KEEP_BUYING);
        insert(c);
end
